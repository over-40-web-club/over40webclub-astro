---
import { siteConfig } from '../config/site';
import { generateGoogleFontsUrl } from '../utils/fonts';
import {
  PRECONNECT_DOMAINS,
  CORE_WEB_VITALS_CONFIG,
  WEB_VITALS_SCRIPT,
} from '../utils/performance';
import SEO from '../components/SEO.astro';
import '../styles/optimized.scss';

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  nofollow?: boolean;
  noarchive?: boolean;
  nosnippet?: boolean;
  noimageindex?: boolean;
  type?: 'website' | 'article' | 'profile';
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  tags?: string[];
  breadcrumbs?: Array<{ name: string; url: string }>;
  faqs?: Array<{ question: string; answer: string }>;
  enableWebVitalsTracking?: boolean;
  criticalImages?: string[];
}

const {
  title,
  description,
  image,
  noindex = false,
  nofollow = false,
  noarchive = false,
  nosnippet = false,
  noimageindex = false,
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  tags,
  breadcrumbs,
  faqs,
  enableWebVitalsTracking = false,
  criticalImages = [],
} = Astro.props;

const googleFontsUrl = generateGoogleFontsUrl();
const isProduction = import.meta.env.PROD;
---

<!doctype html>
<html lang={siteConfig.defaultLang}>
  <head>
    <meta charset='UTF-8' />
    <meta name='viewport' content='width=device-width, initial-scale=1.0' />
    <meta name='generator' content={Astro.generator} />

    <!-- Essential DNS prefetch -->
    <link rel='dns-prefetch' href='https://cdnjs.cloudflare.com' />
    <link rel='dns-prefetch' href='https://cdn.jsdelivr.net' />

    <!-- Critical images preload -->
    {
      criticalImages.map((imageSrc) => (
        <link rel='preload' as='image' href={imageSrc} fetchpriority='high' />
      ))
    }

    <!-- Comprehensive SEO Meta Tags and Structured Data -->
    <SEO
      title={title}
      description={description}
      image={image}
      type={type}
      publishedTime={publishedTime}
      modifiedTime={modifiedTime}
      author={author}
      tags={tags}
      noindex={noindex}
      nofollow={nofollow}
      noarchive={noarchive}
      nosnippet={nosnippet}
      noimageindex={noimageindex}
      breadcrumbs={breadcrumbs}
      faqs={faqs}
    />

    <!-- Simplified font loading - only essential fonts -->
    <link rel='preconnect' href='https://fonts.googleapis.com' crossorigin />
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
    <link
      href='https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Roboto+Slab:wght@400;700&display=swap'
      rel='stylesheet'
    />

    <!-- FontAwesome CSS - simplified loading -->
    <link
      rel='stylesheet'
      href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css'
      integrity='sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=='
      crossorigin='anonymous'
      referrerpolicy='no-referrer'
    />

    <!-- Critical CSS for above-the-fold content -->
    <style>
      /* Prevent layout shift during font loading */
      body {
        font-family:
          -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
          'Helvetica Neue', Arial, sans-serif;
        font-display: swap;
      }

      /* Critical button styles to prevent CLS */
      .btn-primary {
        color: #fff;
        background-color: #c6dd41;
        border-color: #c6dd41;
        display: inline-block;
        font-weight: 700;
        text-align: center;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
        border: 1px solid transparent;
        text-decoration: none;
      }
    </style>
  </head>
  <body>
    <slot />

    <!-- Simplified lazy loading for images -->
    <script is:inline>
      // Simple lazy loading for images
      if ('IntersectionObserver' in window) {
        const imageObserver = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const img = entry.target;
              if (img.dataset.src) {
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
              }
              if (img.dataset.srcset) {
                img.srcset = img.dataset.srcset;
                img.removeAttribute('data-srcset');
              }
              imageObserver.unobserve(img);
            }
          });
        });

        document.addEventListener('DOMContentLoaded', () => {
          document.querySelectorAll('img[data-src]').forEach((img) => {
            imageObserver.observe(img);
          });
        });
      }
    </script>

    <!-- Web Vitals tracking (production only) -->
    {
      enableWebVitalsTracking && isProduction && (
        <script is:inline set:html={WEB_VITALS_SCRIPT} />
      )
    }

    <!-- Bootstrap JS - only load if needed -->
    <script
      src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js'
      integrity='sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa'
      crossorigin='anonymous'
      defer></script>
  </body>
</html>
