---
/**
 * SEO Component for comprehensive meta tags and structured data
 */
import {
  generateMetaTags,
  generatePageSchema,
  generateCanonicalUrl,
  generateRobotsContent,
  type SEOData,
} from '../utils/seo';

export interface Props extends SEOData {
  noindex?: boolean;
  nofollow?: boolean;
  noarchive?: boolean;
  nosnippet?: boolean;
  noimageindex?: boolean;
  breadcrumbs?: Array<{ name: string; url: string }>;
  faqs?: Array<{ question: string; answer: string }>;
}

const {
  title,
  description,
  image,
  url,
  type = 'website',
  publishedTime,
  modifiedTime,
  author,
  tags,
  noindex = false,
  nofollow = false,
  noarchive = false,
  nosnippet = false,
  noimageindex = false,
  breadcrumbs,
  faqs,
} = Astro.props;

// Generate SEO data
const seoData: SEOData = {
  title,
  description,
  image,
  url: url || generateCanonicalUrl(Astro.url.pathname),
  type,
  publishedTime,
  modifiedTime,
  author,
  tags,
};

const metaTags = generateMetaTags(seoData);
const schemas = generatePageSchema(seoData);
const canonicalURL = generateCanonicalUrl(Astro.url.pathname);
const robotsContent = generateRobotsContent({
  index: !noindex,
  follow: !nofollow,
  noarchive,
  nosnippet,
  noimageindex,
});

// Add breadcrumb schema if provided
if (breadcrumbs && breadcrumbs.length > 0) {
  const { generateBreadcrumbSchema } = await import('../utils/seo');
  schemas.push(generateBreadcrumbSchema(breadcrumbs));
}

// Add FAQ schema if provided
if (faqs && faqs.length > 0) {
  const { generateFAQSchema } = await import('../utils/seo');
  schemas.push(generateFAQSchema(faqs));
}
---

<!-- Canonical URL -->
<link rel='canonical' href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{metaTags.title}</title>
<meta name='title' content={metaTags.title} />
<meta name='description' content={metaTags.description} />
<meta name='author' content={metaTags.author} />
<meta name='keywords' content={metaTags.keywords} />

<!-- Robots -->
<meta name='robots' content={robotsContent} />

<!-- Open Graph / Facebook -->
<meta property='og:type' content={metaTags.ogType} />
<meta property='og:url' content={metaTags.ogUrl} />
<meta property='og:title' content={metaTags.ogTitle} />
<meta property='og:description' content={metaTags.ogDescription} />
<meta property='og:image' content={metaTags.ogImage} />
<meta property='og:site_name' content={metaTags.ogSiteName} />
<meta property='og:locale' content={metaTags.ogLocale} />

<!-- Article specific Open Graph tags -->
{
  type === 'article' && publishedTime && (
    <meta property='article:published_time' content={publishedTime} />
  )
}
{
  type === 'article' && modifiedTime && (
    <meta property='article:modified_time' content={modifiedTime} />
  )
}
{
  type === 'article' && author && (
    <meta property='article:author' content={author} />
  )
}
{
  type === 'article' &&
    tags &&
    tags.map((tag) => <meta property='article:tag' content={tag} />)
}

<!-- Twitter -->
<meta name='twitter:card' content={metaTags.twitterCard} />
<meta name='twitter:url' content={metaTags.ogUrl} />
<meta name='twitter:title' content={metaTags.twitterTitle} />
<meta name='twitter:description' content={metaTags.twitterDescription} />
<meta name='twitter:image' content={metaTags.twitterImage} />
<meta name='twitter:site' content={metaTags.twitterSite} />
<meta name='twitter:creator' content={metaTags.twitterCreator} />

<!-- Additional SEO Meta Tags -->
<meta name='theme-color' content='#c6dd41' />
<meta name='msapplication-TileColor' content='#c6dd41' />
<meta name='apple-mobile-web-app-capable' content='yes' />
<meta name='apple-mobile-web-app-status-bar-style' content='default' />
<meta name='format-detection' content='telephone=no' />

<!-- Language and Locale -->
<meta name='language' content='Japanese' />
<meta name='geo.region' content='JP' />
<meta name='geo.placename' content='Japan' />

<!-- Copyright and Publisher -->
<meta
  name='copyright'
  content={`Â© ${new Date().getFullYear()} ${metaTags.author}`}
/>
<meta name='publisher' content={metaTags.author} />

<!-- JSON-LD Structured Data -->
{
  schemas.map((schema, index) => (
    <script
      type='application/ld+json'
      set:html={JSON.stringify(schema)}
      key={index}
    />
  ))
}

<!-- Preload critical resources -->
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel='dns-prefetch' href='//fonts.gstatic.com' />
<link rel='dns-prefetch' href='//cdnjs.cloudflare.com' />

<!-- Favicon and App Icons -->
<link rel='icon' type='image/svg+xml' href='/logo.svg' />
<link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
<link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
<link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />
<link rel='manifest' href='/site.webmanifest' />

<!-- Additional Performance Hints -->
<meta name='referrer' content='strict-origin-when-cross-origin' />
